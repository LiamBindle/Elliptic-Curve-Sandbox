#include <ecc.hpp>

#define CATCH_CONFIG_MAIN
#include <catch.hpp>

#include <string>

TEST_CASE("PrimeField::add", "[arithmetic][PrimeField]") {
    char buff[4096];
    std::vector<std::string> tests = {
        "5", /* + */ "10", /* = */ "15",
        "32", /* + */ "0", /* = */ "32",
        "0", /* + */ "92", /* = */ "92",
        "3721687316841", /* + */ "341232176812", /* = */ "4062919493653",

        "7643227867216378216378216378126748362278463278647382678213673821678",  /* + */
        "3621786372816478216783216784632728647281637821637862178647821681",     /* = */
        "7646849653589194694594999594911381090925744916469020540392321643359",

        "97894251564864254842156456425145186612132456456214564515564561516156484845141684521565615645645243745786784521231564562164648",    /* + */
        "4545584464864868486468484684684864848614548656216472647261267461476146143583837678626568697979799764646461466767631364674316767",  /* = */
        "4643478716429732741310641141110010035226681112672687211776832022992302628428979363148134313625445008392248251288862929236481415"
    };
    
    mpz_t a, b, r, c, p;
    mpz_inits(a, b, r, c, p, NULL);

    ff::PrimeField pf(p);

    for(int i = 0; i < tests.size();) {
        mpz_set_str(a, tests[i++].c_str(), 10);
        mpz_set_str(b, tests[i++].c_str(), 10);
        mpz_set_str(c, tests[i++].c_str(), 10);

        pf.add(a, b, r);
        gmp_sprintf(buff, "%s + %s: expected %s, got %Zd", 
            tests[i-3].c_str(), tests[i-2].c_str(), tests[i-1].c_str(), r
        );
        INFO(buff);
        REQUIRE(mpz_cmp(r, c) == 0);
    }
}

TEST_CASE("PrimeField::sub", "[arithmetic][PrimeField]") {
    char buff[4096];
    std::vector<std::string> tests = {
        "5", /* - */ "10", /* = */ "-5",
        "32", /* - */ "0", /* = */ "32",
        "0", /* - */ "92", /* = */ "-92",
        "3721687316841", /* - */ "341232176812", /* = */ "3380455140029",

        "7643227867216378216378216378126748362278463278647382678213673821678",  /* - */
        "3621786372816478216783216784632728647281637821637862178647821681",     /* = */
        "7639606080843561738161433161342115633631181640825744816035025999997",

        "97894251564864254842156456425145186612132456456214564515564561516156484845141684521565615645645243745786784521231564562164648",    /* - */
        "4545584464864868486468484684684864848614548656216472647261267461476146143583837678626568697979799764646461466767631364674316767",  /* = */
        "-4447690213300004231626328228259719662002416199760258082745702899959989658738695994105003082334154520900674682246399800112152119"
    };
    
    mpz_t a, b, r, c, p;
    mpz_inits(a, b, r, c, p, NULL);

    ff::PrimeField pf(p);

    for(int i = 0; i < tests.size();) {
        mpz_set_str(a, tests[i++].c_str(), 10);
        mpz_set_str(b, tests[i++].c_str(), 10);
        mpz_set_str(c, tests[i++].c_str(), 10);

        pf.sub(a, b, r);
        gmp_sprintf(buff, "%s - %s: expected %s, got %Zd", 
            tests[i-3].c_str(), tests[i-2].c_str(), tests[i-1].c_str(), r
        );
        INFO(buff);
        REQUIRE(mpz_cmp(r, c) == 0);
    }
}

TEST_CASE("PrimeField::mul", "[arithmetic][PrimeField]") {
    char buff[4096];
    std::vector<std::string> tests = {
        "5", /* * */ "10", /* = */ "50",
        "32", /* * */ "0", /* = */ "0",
        "0", /* * */ "92", /* = */ "0",
        "3721687316841", /* * */ "341232176812", /* = */ "1269959464539265977290892",

        "7643227867216378216378216378126748362278463278647382678213673821678",  /* * */
        "3621786372816478216783216784632728647281637821637862178647821681",     /* = */
        "27682138533815433258768909002432884204896905547648016531938063765101010647871660603272446927013154957603100469765776947029136200718",

        "97894251564864254842156456425145186612132456456214564515564561516156484845141684521565615645645243745786784521231564562164648",    /* * */
        "4545584464864868486468484684684864848614548656216472647261267461476146143583837678626568697979799764646461466767631364674316767",  /* = */
        "444986589112820298264312397041113230362858816003453197908750141235241063480433378988465852638479429195240823212161187510183430634079067512534480715370152721397489311953021642480080253163545192450054558126885826431703838666665753844991010730507961053016"
    };
    
    mpz_t a, b, r, c, p;
    mpz_inits(a, b, r, c, p, NULL);

    ff::PrimeField pf(p);

    for(int i = 0; i < tests.size();) {
        mpz_set_str(a, tests[i++].c_str(), 10);
        mpz_set_str(b, tests[i++].c_str(), 10);
        mpz_set_str(c, tests[i++].c_str(), 10);

        pf.mul(a, b, r);
        gmp_sprintf(buff, "%s * %s: expected %s, got %Zd", 
            tests[i-3].c_str(), tests[i-2].c_str(), tests[i-1].c_str(), r
        );
        INFO(buff);
        REQUIRE(mpz_cmp(r, c) == 0);
    }
}

TEST_CASE("PrimeField::inv, PrimeField::red", "[arithmetic][PrimeField]") {
    char buff[4096];
    std::vector<std::string> tests = {
        "5", "13",
        "3721863782167841", "26959946667150639794667015087019630673557916260026308143510066298881",
        "16959946667150639794667015087019630673557916260026308143510066298881", "26959946667150639794667015087019630673557916260026308143510066298881",
        "7959946667150639794667015087019630673557916260026308143510066298881", "26959946667150639794667015087019630673557916260026308143510066298881",
        "9959946667150639794667015087019630673557916260026308143510066298881", "26959946667150639794667015087019630673557916260026308143510066298881",
        "26959946666150639794667015077019630673557942260026308143510066298881", "26959946667150639794667015087019630673557916260026308143510066298881",
        "59945667150639794667015087019630673557916260026108144510066298881", "26959946667150639794667015087019630673557916260026308143510066298881",
        "26959946667150639794667015087019630673557916260026308510066298884", "26959946667150639794667015087019630673557916260026308143510066298881",
    };
    
    mpz_t a, b, r, c, p;
    mpz_inits(a, b, r, c, p, NULL);

    for(int i = 0; i < tests.size();) {
        mpz_set_str(a, tests[i++].c_str(), 10);
        mpz_set_str(p, tests[i++].c_str(), 10);
        mpz_set_si(c, 1);
        ff::PrimeField pf(p);
        pf.inv(a, r);
        pf.mul(a, r, r);
        pf.red(r, r);
        gmp_sprintf(buff, "%s/%s mod %s: expected 1, got %Zd", 
            tests[i-2].c_str(), tests[i-2].c_str(), tests[i-1].c_str(), r
        );
        INFO(buff);
        REQUIRE(mpz_cmp(r, c) == 0);
    }
}